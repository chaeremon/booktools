#!/usr/bin/env node
const { args, input, colors, appendSlash } = require("./argparse.js")(`
book-format INPUT [--output OUTPUT] [-no-colors]

\`INPUT\` is the path to the epub text files or './EPUB/content/' by default
\`--output\` is the path to the output directory, or './' by default

The \`tidy\` (https://github.com/htacg/tidy-html5) command must be installed.
`);

const fs = require("fs");
const { spawnSync } = require("child_process");
const location = (input[0] && appendSlash(input[0])) || "./EPUB/content/";

console.log(`Reading files in '${colors.cyan}${location}${colors.reset}'`);

const files = fs.readdirSync(location);

for(let i of files) {
    // Skip anything other than files
    if (!fs.lstatSync(location + i).isFile()) {
        continue;
    }

    // Rename invalid files
    if (!i.endsWith(".xhtml")) {
        let index = i.lastIndexOf(".");
        let target = i.substring(0, index === -1 ? i.length : index) + ".xhtml";
        console.warn(`${colors.bold}${colors.yellow}WARNING${colors.reset}: The file '${colors.cyan}${i}${colors.reset}' has an invalid extension. Moving to '${colors.cyan}${target}${colors.reset}'.`)
        fs.renameSync(location + i, location + target);
        i = target;
    }

    console.log(`Formatting '${colors.cyan}${location + i}${colors.reset}'`);
    const result = spawnSync("tidy", [
        // https://api.html-tidy.org/tidy/quickref_next.html
        "--output-bom", "false",
        "--output-encoding", "utf8",
        "--markup", "true",
        "--quiet", "true",
        "--show-body-only", "false",
        "--show-warnings", "true",
        "--doctype", "omit",
        "--input-xml", "true",
        "--output-xml", "true",
        "--add-meta-charset", "true",
        "--add-xml-decl", "false",
        "--warn-proprietary-attributes", "false",
        "--drop-empty-elements", "true",
        "--numeric-entities", "true",
        "--quote-ampersand", "true",
        "--hide-comments", "false",
        "--join-classes", "true",
        "--break-before-br", "true",
        "--indent", "true",
        "--indent-spaces", "2",
        "--sort-attributes", "alpha",
        "--tidy-mark", "false",
        "--wrap", "0",
        location + i // input file
    ], {
        stdio: "pipe"
    });

    if (result.status === 1) {
        console.warn(`${colors.bold}${colors.yellow}WARNING${colors.reset}: 'tidy' reported warnings:\n`);
        console.warn(result.stderr.toString());
    } else if (result.status !== 0) {
        console.error(`${colors.bold}${colors.red}ERROR${colors.reset}: 'tidy' failed; exit code ${colors.red}${result.status}${colors.reset}`);
        console.error("stderr:\n");
        console.error(result.stderr.toString());
        process.exit(result.status);
        break;
    }

    // Place the two doctypes at the beginning
    // Automatically "fills in" the missing, or both, doctypes
    let data = result.stdout.toString();
    const text0 = `<?xml version="1.0" encoding="utf-8"?>\n`;
    const text1 = `<!DOCTYPE html>\n`;
    if (data.startsWith(text0 + text1)) {} else if (data.startsWith(text1)) {
        data = text0 + data;
    } else if (data.startsWith(text0)) {
        data = text0 + text1 + data.substring(text0.length);
    } else {
        data = text0 + text1 + data;
    }
    fs.writeFileSync(location + i,  data);

}

console.log(`Formatting '${colors.cyan}${require("path").dirname(location) + "/package.opf"}${colors.reset}'`);

const result = spawnSync("tidy", [
    "--output-bom", "false",
    "--output-encoding", "utf8",
    "--markup", "true",
    "--quiet", "true",
    "--show-warnings", "true",
    "--input-xml", "true",
    "--output-xml", "true",
    "--add-xml-decl", "true",
    "--warn-proprietary-attributes", "false",
    "--drop-empty-elements", "false",
    "--hide-comments", "false",
    "--indent", "true",
    "--indent-spaces", "2",
    "--wrap", "0",
    location + "../package.opf"
], {
    stdio: "pipe"
});

if (result.status === 1) {
    console.warn(`${colors.bold}${colors.yellow}WARNING${colors.reset}: 'tidy' reported warnings:\n`);
    console.warn(result.stderr.toString());
} else if (result.status !== 0) {
    console.error(`${colors.bold}${colors.red}ERROR${colors.reset}: 'tidy' failed; exit code ${colors.red}${result.status}${colors.reset}`);
    console.error("stderr:\n");
    console.error(result.stderr.toString());
    process.exit(result.status);
}

// Update the modified meta property

let today = new Date;
today.setUTCHours(0);
today.setUTCMinutes(0);
today.setUTCSeconds(0);
today.setUTCMilliseconds(0);

let data = result.stdout.toString().replace(/(<meta property="dcterms:modified">)(.*)(<\/meta>)/, "$1" + today.toISOString() + "$3")

fs.writeFileSync(location + "../package.opf",  data);
